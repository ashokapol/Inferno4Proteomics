using System;
using System.Drawing;
using System.Collections;
using System.ComponentModel;
using System.Threading;
using System.Windows.Forms;
using System.Data;
using System.IO;
using System.Text.RegularExpressions;
using System.Runtime.InteropServices;
using Microsoft.Win32;
using DAnTE.Tools;
using DAnTE.ExtraControls;
using DAnTE.Paradiso;
using DAnTE.Properties;

namespace DAnTE.Inferno
{
    public partial class frmDAnTEmdi : Form
    {
        private frmRmsg mfrmRmsg;

        public string SessionFile = null;
        private string tempPath = @"c:";
        private string tempFile = "";
        private string Repository;// = @"http://lib.stat.cmu.edu/R/CRAN";
        private string RpackList;
        private clsRconnect rConnector;

        public frmDAnTEmdi()
        {
            InitializeComponent();

            this.Text = "DAnTE " + Application.ProductVersion.ToString();

            SplashScreen.ShowSplashScreen();
            Application.DoEvents();

            SplashScreen.SetStatus("Starting DAnTE...");
            System.Threading.Thread.Sleep(100);
            SplashScreen.SetStatus("Reading Configuration Parameters...");
            if (!ConfigParameters())
            {
                SplashScreen.CloseForm();
                MessageBox.Show("Error in reading dante.conf file.",
                    "dante.conf error", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
                this.Close();
            }

            SplashScreen.SetStatus("Initializing Folders...");
            // Initialize folders
            tempPath = System.Environment.GetFolderPath(Environment.SpecialFolder.CommonApplicationData);
            tempFile = tempPath.Replace("\\", "/") + "/DAnTE/_temp.png";
            this.mhelpProviderDAnTE.HelpNamespace = Application.StartupPath + "\\DAnTE.chm";
            System.Threading.Thread.Sleep(10);

            SplashScreen.SetStatus("Establishing Connection to R...");
            rConnector = new clsRconnect();
            if (!rConnector.initR())
            {
                SplashScreen.CloseForm();
                MessageBox.Show("Try again. R failed to initialize for some unknown reason.",
                    "R needs another chance ;-)", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
                this.Close();
            }
            System.Threading.Thread.Sleep(10);

            SplashScreen.SetStatus("Initializing R Functions...");
            if (!LoadRfunctions())
            {
                SplashScreen.CloseForm();
                MessageBox.Show("Error in sourcing R functions", "Initializing R error",
                    MessageBoxButtons.OK, MessageBoxIcon.Error);
                this.Close();
            }
            InitLoadRpackages();
            System.Threading.Thread.Sleep(10);

            SplashScreen.SetStatus("Checking R version...");
            if (!CheckRVersion("2", "6.0"))
            {
                SplashScreen.CloseForm();
                MessageBox.Show("R version is not compatible." + Environment.NewLine +
                    "Please install R version 2.7.x (2.7.2 is the highest compatible)." + Environment.NewLine +
                    "Latest R version can be downloaded from http://cran.r-project.org/",
                    "R version incompatible", MessageBoxButtons.OK, MessageBoxIcon.Error);
                this.Close();
            }
            System.Threading.Thread.Sleep(10);

            SplashScreen.SetStatus("Checking R Packages Required...");
            if (!InstallRequiredRPackages())
            {
                SplashScreen.CloseForm();
                MessageBox.Show("Try again. R failed to install required packages." + Environment.NewLine +
                    "If this is the first time you run DAnTE after installing, run it 'Elevated', else" +
                    "try changing the repository in the dante.conf file.",
                    "R problem...", MessageBoxButtons.OK, MessageBoxIcon.Asterisk);
                this.Close();
            }
            System.Threading.Thread.Sleep(10);

            SplashScreen.SetStatus("Cleaning up temp files...");
            DeleteTempFile(tempFile);
            System.Threading.Thread.Sleep(10);

            SplashScreen.SetStatus("Setting Up Child Forms...");
            mfrmRmsg = new frmRmsg();
            rConnector.rdcom.SetCharacterOutputDevice((StatConnectorCommonLib.IStatConnectorCharacterDevice)mfrmRmsg.
                axStatConnectorCharacterDevice1.GetOcx());
            rConnector.rdcom.EvaluateNoReturn("print(version)");

            this.Activate();
            SplashScreen.CloseForm();
        }

        #region Private methods
        private bool ConfigParameters()
        {
            string confPath = Application.StartupPath + "\\dante.conf";
            Engine engine = new Engine(confPath);
            engine.AddParameter(new Parameter("Repository", ParameterType.REQUIRED));
            engine.AddParameter(new Parameter("Rpackages", ParameterType.REQUIRED));
            //engine.AddParameter(new Parameter("Rfolder", ParameterType.OPTIONAL, "NONE"));
            EngineStatus es = engine.ReadFile();
            if (es == EngineStatus.FAIL)
            {
                Console.WriteLine("Configuration Error: " + engine.Details);
                //Bail out as you see fit.
                return false;
            }
            //Else the configuration parameters have been read.
            Repository = engine["Repository"].Val;
            RpackList = engine["Rpackages"].Val;
            //RfilesPath = engine["Rfolder"].Val;
            return true;
        }
        
        /// <summary>
        /// Load the RData file from root folder
        /// </summary>
        /// <returns></returns>
        private bool LoadRfunctions()
        {
            bool success = false;

            string mstrRDataFile = Application.StartupPath.Replace("\\", "/") + "/DAnTE.RData";
            try
            {
                success = rConnector.loadRData(mstrRDataFile);
            }
            catch (Exception ex)
            {
                success = false;
                Console.WriteLine(ex.Message);
            }
            return success;
        }

        private bool CheckRVersion(string mstrMajor, string mstrMinor)
        {
            string rcmd;
            bool mblresult = true;

            try
            {
                rcmd = @"verOK <- RVersionOK(major=" + mstrMajor + ",minor=" + mstrMinor + ")";
                rConnector.rdcom.EvaluateNoReturn(rcmd);
                object rout = rConnector.rdcom.GetSymbol("verOK");

                mblresult = (bool)rout;
            }
            catch (Exception ex)
            {
                mblresult = false;
                Console.WriteLine("Exception thrown: " + ex.Message, "Error!");
            }
            return mblresult;
        }

        private bool InstallRequiredRPackages()
        {
            string rcommand;
            bool mblresult = true;

            try
            {
                rcommand = @"installPackages(c(" + RpackList + @"), repository=""" + Repository + @""")";
                rConnector.rdcom.EvaluateNoReturn(rcommand);

                rcommand = @"update.packages(checkBuilt=TRUE, ask=FALSE,repos=""" + Repository + @""")";
                rConnector.rdcom.EvaluateNoReturn(rcommand);

                mblresult = true;
            }
            catch (Exception ex)
            {
                mblresult = false;
                Console.WriteLine("Exception thrown: " + ex.Message, "Error!");
            }
            return mblresult;
        }

        private bool UpdateRPackages()
        {
            string rcommand;
            bool mblresult = true;

            try
            {
                rcommand = @"update.packages(checkBuilt=TRUE, ask=FALSE,repos=""" + Repository + @""")";
                rConnector.rdcom.EvaluateNoReturn(rcommand);

                mblresult = true;
            }
            catch (Exception ex)
            {
                mblresult = false;
                Console.WriteLine("Exception thrown: " + ex.Message, "Error!");
            }
            return mblresult;
        }

        private bool InitLoadRpackages()
        {
            string rcommand;
            bool mblresult = true;

            try
            {
                rcommand = @"require(rcom)";
                rConnector.rdcom.EvaluateNoReturn(rcommand);
                rcommand = @"require(rscproxy)";
                rConnector.rdcom.EvaluateNoReturn(rcommand);
                mblresult = true;
            }
            catch (Exception ex)
            {
                mblresult = false;
                Console.WriteLine("Exception thrown: " + ex.Message, "Error!");
            }
            return mblresult;
        }
        
        private bool DeleteTempFile(string tempfile)
        {
            bool ok = true;
            tempfile = tempfile.Replace("/", "\\");

            if (File.Exists(tempfile))
            {
                try
                {
                    rConnector.rdcom.EvaluateNoReturn("graphics.off()");
                    File.Delete(tempfile);
                }
                catch (Exception ex)
                {
                    ok = false;
                    Console.WriteLine(ex.Message);
                }
            }
            return ok;
        }

        private void StartMain(string dntfile)
        {
            try
            {
                foreach (Form f in MdiChildren)
                {
                    frmDAnTE mf = f as frmDAnTE;
                    if (mf != null)
                    {
                        if (mf.WindowState == FormWindowState.Minimized)
                            mf.WindowState = FormWindowState.Normal;
                        mf.BringToFront();
                        if (dntfile != null)
                            mf.OpenSessionThreaded(dntfile);
                        return;
                    }
                }
                frmDAnTE mfrmDAnTE = frmDAnTE.GetChildInstance();
                mfrmDAnTE.TempFile = tempFile;
                mfrmDAnTE.TempLocation = tempPath;
                mfrmDAnTE.RConnector = rConnector;
                mfrmDAnTE.SessionFile = dntfile;
                mfrmDAnTE.MdiParent = this;
                mfrmDAnTE.ParentInstance = this;

                mfrmDAnTE.Show();
                mfrmDAnTE.BringToFront();
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
        }

        #endregion

        private void mnuItemNew_Click(object sender, EventArgs e)
        {
            StartMain(SessionFile);
        }

        private void mnuItemExit_Click(object sender, EventArgs e)
        {
            frmDAnTE mfrmDAnTE = frmDAnTE.GetChildInstance();

            if (mfrmDAnTE.OK2Exit())
            {
                this.DialogResult = DialogResult.OK;
                rConnector.closeR();
                this.Close();
            }
        }

        private void mnuItemResource_Click(object sender, EventArgs e)
        {
            if (!LoadRfunctions())
                MessageBox.Show("Error ocurred while Re-sourcing. Changes may not be effective", "Error",
                    MessageBoxButtons.OK, MessageBoxIcon.Error);
            //else
            //    statusBarPanelMsg.Text = "R functions re-sourced.";
        }

        private void mnuItemRlogs_Click(object sender, EventArgs e)
        {
            mfrmRmsg.Show();
            mfrmRmsg.Focus();
        }

        private void mnuItemClearTmp_Click(object sender, EventArgs e)
        {
            DeleteTempFile(tempFile);
        }

        private void mnuItemHelp_Click(object sender, EventArgs e)
        {
            Help.ShowHelp(this, this.mhelpProviderDAnTE.HelpNamespace);
        }

        private void mnuItemBugs_Click(object sender, EventArgs e)
        {
            string mstrDomain = Environment.UserDomainName;
            if (mstrDomain.Equals("PNL"))
            {
                frmTracWebBugReport mfrmTracWeb = new frmTracWebBugReport();
                mfrmTracWeb.Show();
            }
            else
            {
                frmBugReportEmail mfrmBugEmail = new frmBugReportEmail();
                mfrmBugEmail.Show();
            }
            //frmBugReportEmail mfrmBugEmail = new frmBugReportEmail();
            //mfrmBugEmail.Show();
        }

        private void mnuItemAbout_Click(object sender, EventArgs e)
        {
            //frmAbout mfrmAbout = new frmAbout();
            //mfrmAbout.version = "Version " + Application.ProductVersion.ToString();
            ////mfrmAbout.version = "Version 0.13";
            //mfrmAbout.ShowDialog();

            frmAbout2 mfrmAbout = new frmAbout2();
            mfrmAbout.ShowDialog();
        }

        //protected override void OnMdiChildActivate(EventArgs e)
        //{
        //    ToolStripManager.RevertMerge(this.mtoolStripMDI);

        //    frmDAnTE f1 = ActiveMdiChild as frmDAnTE;
        //    if (f1 != null)
        //    {
        //        ToolStripManager.Merge(f1.ToolStripDAnTE, mtoolStripMDI.Name);
        //    }
        //    base.OnMdiChildActivate(e);
        //}

        private void frmDAnTEmdi_Load(object sender, EventArgs e)
        {
            StartMain(SessionFile);
        }

        private void mnuWindowItem_Click(object sender, EventArgs e)
        {
            ToolStripItem item = sender as ToolStripItem;
            if (item != null)
            {
                string enumVal = item.Tag as string;
                if (enumVal != null)
                {
                    LayoutMdi((MdiLayout) Enum.Parse(typeof(MdiLayout),enumVal));
                }
            }
        }

        private void Form_DragEnter(object sender, DragEventArgs e)
        {
            if (e.Data.GetDataPresent(DataFormats.FileDrop))
                e.Effect = DragDropEffects.All;
            else
                e.Effect = DragDropEffects.None;
        }

        private void Form_DragDrop(object sender, DragEventArgs e)
        {
            string[] s = (string[])e.Data.GetData(DataFormats.FileDrop, false);

            if (s.Length > 1)
                MessageBox.Show("Only one file at a time!", "One file please...",
                    MessageBoxButtons.OK, MessageBoxIcon.Warning);
            else
            {
                string fExt = Path.GetExtension(s[0]);
                if (!fExt.Equals(".dnt"))
                {
                    MessageBox.Show("Wrong file type!", "Use only .dnt files...",
                    MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    return;
                }
                else
                {
                    StartMain(s[0]);
                }
            }
        }

        public ToolStrip MainDanteToolBar
        {
            get { return mtoolStripMDI; }
            set { mtoolStripMDI = value; }
        }
    }
}